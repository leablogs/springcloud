package threads.forkjoin;import java.util.concurrent.ExecutionException;import java.util.concurrent.ForkJoinPool;import java.util.concurrent.Future;import java.util.concurrent.RecursiveTask;public class CountTask extends RecursiveTask<Integer> {    private static final int THRESHOLD = 2; //阈值    private int start;    private int end;    public CountTask(int start, int end) {        this.start = start;        this.end = end;    }    @Override    protected Integer compute() {        int sum = 0;        boolean canCompute = (end - start) <= THRESHOLD;        if (canCompute) {            for (int i = start; i <= end; i++) {                System.out.println("i=" + i + ",sum=" + sum);                sum += i;            }        } else {            int middle = (start + end) / 2;            CountTask leftTask = new CountTask(start, middle);            System.out.println("start: " + start + ", middle: " + middle);            CountTask rightTask = new CountTask(middle, end);            leftTask.fork();            rightTask.fork();            int leftResult = leftTask.join();            int rightResult = rightTask.join();            System.out.println("left result=" + leftResult + ", right resuult=" + rightResult);            sum = leftResult + rightResult;        }        return sum;    }}