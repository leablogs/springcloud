package threads;import java.util.Arrays;public class RandomThread {    public static void main(String[] args) throws InterruptedException {        /**         * 线程是无序的演示         *///        MyThread myThread = new MyThread();//        myThread.setName("myThread");//        myThread.start();//        for (int i = 0; i < 10; i++) {//            int time = (int) (Math.random() * 1000);//            Thread.sleep(time);//            System.out.println("main=" + Thread.currentThread().getName());//        }//        MyThread1 myThread1 = new MyThread1(1);//        MyThread1 myThread2 = new MyThread1(2);//        myThread1.start();//        myThread2.start();        /**         * 非共享变量多线程下读取         *///        MyThread2 myThreadA = new MyThread2("A");//        MyThread2 myThreadB = new MyThread2("B");//        MyThread2 myThreadC = new MyThread2("C");//        myThreadA.start();//        myThreadB.start();//        myThreadC.start();        /**         * 共享变量多线程下读取         *///        MyThread2 myThread3 = new MyThread2();//        Thread threadA = new Thread(myThread3, "A");//        Thread threadB = new Thread(myThread3, "B");//        Thread threadC = new Thread(myThread3, "C");//        Thread threadD = new Thread(myThread3, "D");//        threadA.start();//        System.out.println("A线程是否存活：" + threadA.isAlive());//        threadB.start();//        threadC.start();//        threadD.start();//        MyThread3 myThread3 = new MyThread3();//        myThread3.start();//        Thread.sleep(3000);//        myThread3.interrupt();//        System.out.println("是否停止1？：" + myThread3.interrupted());//        System.out.println("是否停止2？：" + myThread3.interrupted());//        System.out.println("是否停止3？：" + myThread3.isInterrupted());//        System.out.println("是否停止4？：" + myThread3.isInterrupted());//        Thread.currentThread().interrupt();//        System.out.println("是否停止1？：" + Thread.interrupted());//        System.out.println("是否停止2？：" + Thread.interrupted());        /**         * 测试yelid方法         *///        MyThread4 myThread4 = new MyThread4();//        myThread4.start();        long start = System.currentTimeMillis();        new Runnable() {            @Override            public void run() {                aaaa();            }        };        System.out.println("消耗时间：" + (System.currentTimeMillis() - start));        long start1 = System.currentTimeMillis();        aaaa();        System.out.println("消耗时间1：" + (System.currentTimeMillis() - start1));    }    private static void aaaa() {        try {            Thread.sleep(10000);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    static class MyThread extends Thread {        @Override        public void run() {            try {                for (int i = 0; i < 10; i++) {                    int time = (int) (Math.random() * 1000);                    Thread.sleep(time);                    System.out.println("run=" + Thread.currentThread().getName());                }            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }    static class MyThread1 extends Thread {        private int i;        MyThread1(int i) {            super();            this.i = i;        }        @Override        public void run() {            System.out.println(i);        }    }    static class MyThread2 extends Thread {        private int count = 5;        MyThread2(String name) {            this.setName(name);        }        MyThread2() {        }        @Override        public void run() {            synchronized (MyThread2.class) {                this.interrupt();                while (count > 0) {                    count--;                    System.out.println("由 " + Thread.currentThread().getName() + "计算，count=" + count);                }                System.out.println("线程是否中断：" + this.isInterrupted());                try {                    sleep(3000);                } catch (InterruptedException e) {                    e.printStackTrace();                }            }        }    }    static class MyThread3 extends Thread {        @Override        public void run() {            super.run();            for (int i = 0; i < 50000; i++) {                try {                    sleep(20);                } catch (InterruptedException e) {                    e.printStackTrace();                }                if (this.isInterrupted()) {                    System.out.println("已经停止状态，我要退书");                    return;                }                System.out.println("i=" + (i + 1));            }        }    }    static class MyThread4 extends Thread {        private int count = 0;        @Override        public void run() {            super.run();            long time = System.currentTimeMillis();            for (int i = 0; i < 50000000; i++) {                Thread.yield();                count = count + (i + 1);            }            System.out.println("请求时间：" + (System.currentTimeMillis() - time) + "ms");        }    }}