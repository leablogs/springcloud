package threads;public class SemaphoreCacheLimitTest {    public static void main(String[] args) throws InterruptedException {        SemaphoreCacheLimit<Integer> bb = new SemaphoreCacheLimit<>(10);//        System.out.println(bb.isEmpty());//        System.out.println(bb.isFull());//        System.out.println("=========================================");//        for (int i = 0; i < 10; i++) {//            bb.put(i);//        }////        System.out.println(bb.isEmpty());//        System.out.println(bb.isFull());        Thread taker = new Thread() {            @Override            public void run() {                try {                    int unused = bb.take();                } catch (InterruptedException e) {                    e.printStackTrace();                }            }        };        taker.start();//        Thread.sleep(LOCKUP);        taker.interrupt();        taker.join();    }}