package threads;import lombok.extern.slf4j.Slf4j;import socket.MyExecutorPool;import java.util.concurrent.Callable;import java.util.concurrent.Future;import java.util.concurrent.FutureTask;import java.util.concurrent.ThreadPoolExecutor;@Slf4jpublic class MyCallableThread {    public static void main(String[] args) throws Exception {        long start = System.currentTimeMillis();        CallableThread callableThread = new CallableThread();        Thread thread = new Thread(new MyThreads());        Thread thread1 = new Thread(new MyThreads1());        FutureTask<Integer> result = new FutureTask<Integer>(callableThread);        new Thread(result).start();        Integer sum = result.get();        MyExecutorPool myExecutorPool = new MyExecutorPool();        ThreadPoolExecutor threadPoolExecutor = myExecutorPool.startExecutor();        Future<Integer> result1 = threadPoolExecutor.submit(callableThread);        thread.join();        thread.start();        thread1.start();        Integer sum1 = result1.get();        log.info("time:{}", System.currentTimeMillis() - start);        log.info("获取返回结果：{}", sum1);        log.info("main 线程已结束");    }}class CallableThread implements Callable<Integer> {    @Override    public Integer call() throws Exception {        int sum = 0;        for (int i = 1; i < 100; i++) {            sum += i;            Thread.sleep(5);        }        return sum;    }}@Slf4jclass MyThreads implements Runnable {    @Override    public void run() {//        try {//            Thread.sleep(10);//        } catch (InterruptedException e) {//            e.printStackTrace();//        }    }}@Slf4jclass MyThreads1 implements Runnable {    @Override    public void run() {        try {            Thread.sleep(10);        } catch (InterruptedException e) {            e.printStackTrace();        }        log.info("============{}");    }}