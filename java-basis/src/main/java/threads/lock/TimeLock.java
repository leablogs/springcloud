package threads.lock;import java.util.concurrent.TimeUnit;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;/** * 可预定时间的锁 */public class TimeLock {    private Lock lock = new ReentrantLock();    private Lock fromAcct = new ReentrantLock();    private Lock toAcct = new ReentrantLock();    public boolean transferMoney() {        while (true) {            try {                if (fromAcct.tryLock()) {                    try {                        if (toAcct.tryLock()) {                        }                    } finally {                        toAcct.unlock();                    }                }            } finally {                fromAcct.unlock();            }        }    }    // 可定预定时间的锁    public boolean trySendOnSharedLine(String message, long timeout, TimeUnit unit) throws InterruptedException {        long nanosToLock = unit.toNanos(timeout);        if (!lock.tryLock(nanosToLock, unit)) {            return false;        }        try {            return false;        } finally {            lock.unlock();        }    }    // 可中断的锁    public boolean sendOnSharedLine(String message) throws InterruptedException {        lock.lockInterruptibly();        try {            return false;        } finally {            lock.unlock();        }    }}