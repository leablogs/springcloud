package threads;import oshi.annotation.concurrent.GuardedBy;import oshi.annotation.concurrent.ThreadSafe;import java.util.Set;@ThreadSafepublic class SplitLockBefore {    @GuardedBy("this")    public final Set<String> users;    @GuardedBy("this")    public final Set<String> queries;    public SplitLockBefore(Set<String> users, Set<String> queries) {        this.users = users;        this.queries = queries;    }    public synchronized void addQuery(String u) {        queries.add(u);    }    public synchronized void addUser(String u) {        queries.add(u);    }    public synchronized void removeUser(String u) {        users.remove(u);    }    public synchronized void removeQuery(String u) {        queries.remove(u);    }}@ThreadSafeclass SplitLockAfter {    @GuardedBy("this")    public final Set<String> users;    @GuardedBy("this")    public final Set<String> queries;    public SplitLockAfter(Set<String> users, Set<String> queries) {        this.users = users;        this.queries = queries;    }    public void addQuery(String u) {        synchronized (queries) {            queries.add(u);        }    }    public synchronized void addUser(String u) {        synchronized (users) {            users.add(u);        }    }    public synchronized void removeUser(String u) {        synchronized (users) {            users.remove(u);        }    }    public synchronized void removeQuery(String u) {        synchronized (queries) {            queries.remove(u);        }    }}