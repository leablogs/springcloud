package threads.conditions;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;/** * 将condition对象作为成员变量，调用await方法，当前线程会释放锁并在此等待， * 其他线程调用condition对象signal方法，通知当前线程后，当前线程藏await返回，并且返回前已经获取了锁 * */public class ConditionUseCase {    private Lock lock = new ReentrantLock();    Condition condition = lock.newCondition();    public void conditionWait() throws InterruptedException {        lock.lock();        try {            condition.await();        } finally {            lock.unlock();        }    }    public void conditionSignal() {        lock.lock();        try {            condition.signal();        } finally {            lock.unlock();        }    }}