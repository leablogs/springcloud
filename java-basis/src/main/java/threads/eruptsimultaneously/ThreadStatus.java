package threads.eruptsimultaneously;import java.util.concurrent.TimeUnit;public class ThreadStatus {    public static void main(String[] args) {        new Thread(new TimeWaiting(), "TimeWaitingThread").start();        new Thread(new Waiting(), "WaitingThread").start();        new Thread(new Blocked(), "BlockedThread-1").start();        new Thread(new Blocked(), "BlockedThread-2").start();    }    public static class TimeWaiting implements Runnable {        @Override        public void run() {            while (true) {                SleepUtils.second(100);            }        }    }    public static class SleepUtils {        public static final void second(long secondes) {            try {                TimeUnit.SECONDS.sleep(secondes);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }    public static class Waiting implements Runnable {        @Override        public void run() {            while (true) {                synchronized (Waiting.class) {                    try {                        Waiting.class.wait();                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                }            }        }    }    public static class Blocked implements Runnable {        @Override        public void run() {            synchronized (Blocked.class) {                while (true) {                    SleepUtils.second(100);                }            }        }    }}