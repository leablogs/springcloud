package threads;import oshi.annotation.concurrent.GuardedBy;import oshi.annotation.concurrent.ThreadSafe;import java.util.Collections;import java.util.LinkedList;import java.util.List;import java.util.concurrent.Executor;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;/** * 对象完全状态 */@ThreadSafepublic class Counter {    @GuardedBy("this")    private long value = 0;    public synchronized long getValue() {        return value;    }    public synchronized long increment() {        if (value == Long.MAX_VALUE) {            throw new IllegalStateException("");        }        List<String> ts = new LinkedList<>();        Collections.synchronizedList(ts);        ExecutorService service = Executors.newCachedThreadPool();        return ++value;    }}class aa implements Executor{    @Override    public void execute(Runnable command) {        new Thread(command).start();  //新建异步线程执行        command.run();  // d单线程执行    }}